# Урок 56 - Наборы (Множества). Часть 2
# Lesson 56 - Sets. Part 2
# Основные операции над множествами (наборами)


# A | В
#  A.union(В)
#  Объединение. Возвращает множество, являющееся объединением множеств A и B
c = {'красный', 'грузовик', 'двухместный', 'новый'}
d = {'красный', 'минивэн', 'трёхместный'}

a = c | d
print('c | d',a)
# A = A | B  # или A |= B (x = x + 1 -> x += 1)
#  A.update(В)
#  Объединение. Добавляет все элементы массива B в множество A
c1 = {'красный', 'грузовик', 'двухместный', 'новый'}
d1 = {'красный', 'минивэн', 'трёхместный'}

c1 = c1 | d1
print('c1 | d1',c1)
# A & B
#  A.intersection(В)
#  Пересечение. Возвращает набор, являющийся пересечением множеств A и B
c2 = {'красный', 'грузовик', 'двухместный', 'новый'}
d2 = {'красный', 'минивэн', 'трёхместный'}

a2 = c2 & d2
print('c2 & d2',a2)
# A &= B
#  A.intersection_update(В)
#  Пересечение. Оставить в множестве A только элементы, принадлежащие множеству B
c3 = {'красный', 'грузовик', 'двухместный', 'новый'}
d3 = {'красный', 'минивэн', 'трёхместный'}

c3 &= d3
print('c3 &= d3',c3)
# A - B
#  A.difference(В)
#  Вычитание. Возвращает результат вычитания B из А (элементы, включенные в A , но не включены в B ).
c4 = {'красный', 'грузовик', 'двухместный', 'новый'}
d4 = {'красный', 'минивэн', 'трёхместный'}

a4 = c4 - d4
print('c4 - d4',a4)
# A -= B
#  A.difference_update(В)
#  Вычитание. Удаляет все элементы множества B из множества A
c5 = {'красный', 'грузовик', 'двухместный', 'новый'}
d5 = {'красный', 'минивэн', 'трёхместный'}

c5 -= d5
print('c5 -= d5',c5)
# A ^ B
#  A.symmetric_difference(В)
#  Симметричное вычитание. Возвращает симметричную разность множеств A и B (все элементы
#  Не принадлежащие A и B одновременно).
c6 = {'красный', 'грузовик', 'двухместный', 'новый'}
d6 = {'красный', 'минивэн', 'трёхместный'}

a6 = c6 ^ d6
print('c6 ^ d6',a6)
# A ^= B
#  A.symmetric_difference_update(В)
#  Симметричное вычитание. Сохранит в A симметричную разность множеств A и B
c7 = {'красный', 'грузовик', 'двухместный', 'новый'}
d7 = {'красный', 'минивэн', 'трёхместный'}

a7 = c7 | d7
print('c7 | d7',a7)
# A <= B
#  A.issubset(В)
#  Сравнение. Возвращает True если A является подмножеством B
c8 = {'красный', 'грузовик', 'двухместный', 'новый'}
d8 = {'красный', 'минивэн', 'трёхместный'}

a8=c8 <= d8
print('c8 | d8',a8)
# A >= B
#  A.issuperset(В)
#  Сравнение. Возвращает True если B является подмножеством A
c9 = {'красный', 'грузовик', 'двухместный', 'новый'}
d9 = {'красный', 'минивэн', 'трёхместный'}

a9 = c9 >= d9
print('c9 | d9',a)
# A < B
#  Сравнение. Эквивалентно A <= B and A != B
c10 = {'красный', 'грузовик', 'двухместный', 'новый'}
d10 = {'красный', 'минивэн', 'трёхместный'}

a10 = c10 < d10
print('c10< d10',a10)
# A > B
#  Сравнение. Эквивалентно A >= B and A != B
c11 = {'красный', 'грузовик', 'двухместный', 'новый'}
d11 = {'красный', 'минивэн', 'трёхместный'}

a11 = c11 < d11
print('c11 < d11',a11)

# Задание. Написать к каждой операции над множествами по одному примеру.
#A = {'красный', 'грузовик', 'двухместный', 'новый'}
#B = {'красный', 'минивэн', 'трёхместный'}

# result_set = set()

# Пример 1.
# A | В
#result_set = A | B
#print('A | B', result_set)

# Пример 2.
