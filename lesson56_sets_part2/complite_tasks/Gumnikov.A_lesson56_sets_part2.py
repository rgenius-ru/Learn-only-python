# Урок 55 - Наборы (Множества). Часть 2
# Lesson 55 - Sets. Part 2
# Основные операции над множествами (наборами)

A = {'красный', 'грузовик', 'двухместный', 'новый'}
B = {'красный', 'минивэн', 'трёхместный'}

# A | B
# print(A.union(B))
#  Объединение. Возвращает множество, являющееся объединением множеств A и B
#{'новый', 'красный', 'трёхместный', 'двухместный', 'минивэн', 'грузовик'}

# A = A | B
# print(A.update(B))
#  Объединение. Добавляет все элементы массива B в множество A
#None

# A & B
# print(A.intersection(B))
#  Пересечение. Возвращает набор, являющийся пересечением множеств A и B
# {'красный', 'минивэн', 'трёхместный'}

# A & = B
# A.intersection_update(B)
# Пересечение. Оставить в множестве A только элементы, принадлежащие множеству B
# не работает

# A - B
# print(A.difference(B))
#  Вычитание. Возвращает результат вычитания B из А (элементы, включенные в A , но не включены в B ).
# {'новый', 'двухместный', 'грузовик'}

# A - = B
# print(A.difference_update(B))
#  Вычитание. Удаляет все элементы множества B из множества A
# не пашет


# A ^ B
# print(A.symmetric_difference(B))
#  Симметричное вычитание. Возвращает симметричную разность множеств A и B (все элементы
#  Не принадлежащие A и B одновременно).
# {'двухместный', 'грузовик', 'трёхместный', 'новый', 'минивэн'}

# A ^ = B
# print(A.symmetric_difference_update(B))
#  Сохранит в A симметричную разность множеств A и B
# не пашет


# A <= B
# print(A.issubset(B))
#  Возвращает True если A является подмножеством B
# false


# A >= B
# print(A.issuperset(B))
#  Возвращает True если B является подмножеством A
# false



# Задание. Написать к каждой операции над множествами по одному примеру.
A = {'красный', 'грузовик', 'двухместный', 'новый'}
B = {'красный', 'минивэн', 'трёхместный'}

result_set = set()

# Пример 1.
